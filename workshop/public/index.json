[
{
	"uri": "/",
	"title": "AWS Computer Vision at the Edge Workshop",
	"tags": [],
	"description": "",
	"content": "The Labs in this workshop are hands-on activities to explore using AWS Services for Computer Vision at the Edge. The services this workshop explores inlcude:\n AWS IoT Greengrass v2 Amazaon SageMaker and Amazon SageMaker Edge Manager (including Amazon SageMaker Neo) AWS IoT Core  The activities use a mix of AWS Command Line Interface (CLI) and the web based AWS Management Console.\nDifferent types of edge hardware are used in these labs. Before you begin, ensure you have an AWS Account and at least one of these hardware options:\n nVidia Jetson Nano, TX2, or AGX  "
},
{
	"uri": "/setup-nvidia-device.html",
	"title": "Setup nVidia Device",
	"tags": [],
	"description": "",
	"content": "In this section you will set up an nVidia Jetson Nano, TX2, or AGX device with\n Latest Jetpack and other libraries  And then you will install and configure AWS IoT Greengrass v2 on the device.\nPrerequisites You will need\n host computer (Linux, MacOS, or Windows) \u0026ndash; referred to as host \u0026ndash; with administrator or root access an AWS Account with Access Key and Secret Key credentials that has the ability to create IAM roles, IoT Resources, and S3 objects as AWS Console login to the same account an nVidia device (Jetson Nano, TX2, or AGX) internet access  Depending on the device, you may also need\n SD Card (32GB or larger recommended) \u0026ndash; the device will run from this card a USB SD Card reader for use in the host computer to write the device software  To access the device, network connectivity between the host and the device are recommended so as to allow for SSH from the host to the device. Alternatively, an HDMI display, mouse, and keyboard can be directly attached to the device for access. Yet another option for some devices is to configure the device upon First Boot using a USB cable.\nSee the apporpriate nVidia guide for your device:\n Jetson Nano  While these labs are written to primarily use the host computer, it is possible to execute all the commands directly on the target device. If you wish to do that, you may need to modify the lab guides slightly.\n"
},
{
	"uri": "/setup-nvidia-device/nano.html",
	"title": "Jetson Nano",
	"tags": [],
	"description": "",
	"content": "This lab will help you set up an nVidia Jetson Nano as expected for the remainder of the labs.\nWhile your Nano may have come with the latest version of JetPack (nVidia\u0026rsquo;s SDK) pre-installed, for the purposes of this guide, a fresh installation will be created. If you are uncertain if the SDK has been pre-installed, you can follow this guide.\nStep 1: Download the SD Card Image for the Latest JetPack This guide was prepared with JetPack v. 4.5.1\n  From the JetPack SDK Page find the SD Card Image Link for the Jetson Nano.\n  Click the Download the SD Card Image link or use the following commands (Linux):\n  cd ~ wget https://developer.nvidia.com/jetson-nano-sd-card-image -O \u0026#39;image.zip\u0026#39; NB- the image is over 6GB and contains the complete OS for the Nano. The time to download this image may be significant depending on your bandwidth.\nUnzip the image  cd ~ unzip \u0026lt;zipfile-downloaded-above\u0026gt; This will expand the sd-blob-b01.img file.\nStep 2: Write the image to the SD Card   Insert an SD Card of at least 16GB (32GB or more recommended) into a card reader and insert the card reader into the host computer\u0026rsquo;s USB port.\n  Identify the device name for the card\n   Linux\n Type these commands into the terminal:\ncd ~ # or directory where you extrace the img file lsblk # inspect the list to find the disk you just inserted.  # You may need to list it first WITHOUT the card and then again to determine the device name. #  # The device name will be of the form `/dev/sd\u0026lt;x\u0026gt;` where \u0026lt;x\u0026gt; is a letter. # export disk_letter=\u0026lt;insert_your_disk_letter\u0026gt;  MacOS\n Use the Terminal app to enter these commands:\ncd ~ # or directory where you extrace the img file diskutil list # inspect the list to find the disk you just inserted.  # You may need to list it first WITHOUT the card and then again to determine the device name. #  # The device name will be of the form `/dev/disk\u0026lt;n\u0026gt;` where \u0026lt;n\u0026gt; is an integer. # export disk_num=\u0026lt;insert_your_disk_number\u0026gt; Erase the Card Required for MacOS, optional for Linux hosts   MacOS\n diskutil eraseDisk ExFAT Untitled /dev/disk$disk_num diskutil unmountDisk /dev/disk$disk_num Write the image file   Linux\n sudo dd if=sd-blob-b01.img of=/dev/rdisk$disk_letter  MacOS\n sudo dd if=sd-blob-b01.img of=/dev/rdisk$disk_num # note use of /dev/rdisk above NB- writing the image may take a significant amount of time (upwards of 30 minutes) depending on the speed of your disk, USB interface, Card Reader, and the SD Card itself.\nRemove the card  # Linux diskutil eject /dev/disk$disk_letter # MacOS diskutil eject /dev/disk$disk_num Remove the card from the reader.\nStep 3: Boot and configure the device   With the device powered OFF, insert the SD Card into the device\n  Connect a USB cable to the device\u0026rsquo;s micro-USB port and an open USB port on the host OR connect and HDMI monitor, keyboard and mouse to the device.\n  Power the device ON\n  (USB Cable only) Open a serial program on the host computer\n   Linux\n Determine the device name for the serial port\nls /dev/ttyUSB* # as with the disks, you may need to disconnect, and reconnect to compare available device lists # device name will be of the form /dev/ttyUSB\u0026lt;n\u0026gt; where n is an integer # export dev_num=\u0026lt;n\u0026gt; Open the serial port \u0026ndash; using picocom as example, there are many other programs.\nsudo picocom -b 115200 /dev/ttyUSB$dev_num If the current user is a member of the dialout group, sudo is not necessary. It is also possible to construct udev rules to avoid sudo here.\nPress the Return key and follow the on-screen prompts to set up the device and network connections. Accept all defaults\u0026ndash;recommend expanding the filesystem to the maximum.\nThe device may disconnect after configuration\n (Monitor and Keyboard) Follow the on-screen prompts to set up the device and network connections. Accept all defaults\u0026ndash;recommend expanding the filesystem to the maximum\n  Verify SSH connectivity (Optional, but recommended) This guide assumes you will connect to the device over ssh. However, all commands can be entered directly on the device if desired.\n  From a terminal on the host or other SSH program (e.g. PuTTY on Windows):\nssh \u0026lt;user\u0026gt;@\u0026lt;hostname\u0026gt;.local # where hostname and user are the ones you set up in #4 and the device is on the same network as the host ssh \u0026lt;user\u0026gt;@\u0026lt;ip\u0026gt; # if zeroconf is not running or other networking arrangement You have now added the device to your network and verified it\u0026rsquo;s connectivity. For the remainder of this workshop, use whatever mechanism you used to connect whenever you see ssh \u0026lt;user\u0026gt;@\u0026lt;device\u0026gt;\n"
},
{
	"uri": "/setup-nvidia-device/install-tools.html",
	"title": "Install Tools",
	"tags": [],
	"description": "",
	"content": "These steps will guide you through installing the necessary tools on your development host and the target device. You will install:\n AWS Command Line Interface (CLI)  Step 1: Install AWS CLI on development host On your host, install the AWS CLI version 2\n Linux (x86_64)\n curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install  MacOS\n curl \u0026#34;https://awscli.amazonaws.com/AWSCLIV2.pkg\u0026#34; -o \u0026#34;AWSCLIV2.pkg\u0026#34; sudo installer -pkg AWSCLIV2.pkg -target / Step 2: Configure the AWS CLI   Find the ACCESS KEY ID and SECRET ACCESS KEY for a role in your AWS account that has permissions to create IAM, IoT, and S3 resources. These are typically provided when the account is created and often delivered in a CSV file. If you cannot locate them, contact your account administrator or create new credentials from the IAM console.\n  Add the credentials to your AWS profile by typing\n  aws configure # optionally add -profile \u0026lt;profile-name\u0026gt;  When prompted provide the Access Key and Secret Access Key. For the purposes of this workshop, set the region to us-west-2 and json for the output format. The aws configure command can be reused to verify that values have been set properly.\naws configure # at the prompt, provide a new value or press return to accept the current value AWS Access Key ID [****************MNO5]: AWS Secret Access Key [****************RgDp]: Default region name [us-west-2]: Default output format [json]: Step 3: Verify configuration Verify the functionality of the CLI and the configuration with the command:\naws sts get-caller-identity Verify the UserId and Account values are correct in the output.\n{ \u0026#34;UserId\u0026#34;: \u0026#34;AID----BMW\u0026#34;, \u0026#34;Account\u0026#34;: \u0026#34;11-----16\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::11-----16:user/s---c\u0026#34; } Step 4: Install other Linux tools  Required tools: These tools are required for later steps of the workshop.\n sudo apt install curl -y  Optional tools: These tools can make working with the device easier and are optional.\n sudo apt install htop vim tree tmux -y "
},
{
	"uri": "/greengrass-v2.html",
	"title": "Install Greengrass V2",
	"tags": [],
	"description": "",
	"content": "This lab will guide you to set up and validate AWS IoT Greengrass v2 on the device you previously set up.\n"
},
{
	"uri": "/inference.html",
	"title": "Add Inference",
	"tags": [],
	"description": "",
	"content": "In this section, you will\n Create the inference components Deploy them with Greengrass v2 Validate the results  "
},
{
	"uri": "/greengrass-v2/install.html",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "This lab will guide you to set up AWS IoT Greengrass v2 on the device you previously set up.\nStep 1: Connect to the target device  Using SSH\n ssh \u0026lt;user\u0026gt;@\u0026lt;device\u0026gt;  With Keybord and Monitor\n Open the terminal app.\nStep 2: Install Corretto (Java) Enter these commands into the device shell:\n(Copy and paste one line at a time and enter password for sudo when prompted.)\nwget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add - sudo add-apt-repository \u0026#39;deb https://apt.corretto.aws stable main\u0026#39; sudo apt-get update; sudo apt-get install -y java-1.8.0-amazon-corretto-jdk Validate the successful installation of Java with\njava -version The output should look similar to:\nopenjdk version \u0026#34;1.8.0_282\u0026#34; OpenJDK Runtime Environment Corretto-8.282.08.1 (build 1.8.0_282-b08) OpenJDK 64-Bit Server VM Corretto-8.282.08.1 (build 25.282-b08, mixed mode) NB- This workshop was developed with Corretto v 1.8, but other JREs may work just as well\nStep 3: Download Greengrass v2 curl -s https://d2s8p88vqu9w66.cloudfront.net/releases/greengrass-nucleus-latest.zip \u0026gt; greengrass-nucleus-latest.zip unzip greengrass-nucleus-latest.zip -d GreengrassCore \u0026amp;\u0026amp; rm greengrass-nucleus-latest.zip Step 4: Set environment variables Greengrass v2 has the ability to self-install and configure, but needs access credentials. Additionally, this installer will create an IoT thing, thing group, and IAM roles. Provide these values through shell variables. The AWS CLI credentials can be the same as you used in the host setup or can be newly created for just this role. The installer will not save these values. Using shell variables eliminates the need to install the CLI on the device.\n   shell var description     AWS_ACCESS_KEY_ID ID for account to create resources   AWS_SECRET_ACCESS_KEY secret key   AWS_DEFAULT_REGION region to use \u0026ndash; us-west-2 for this workshop   THING_NAME device name for this Greengrass Core   GROUP_NAME name for the Greengrass Group   ROLE_NAME name of IAM role for the core   ROLE_ALIAS alias used to refer to role to allow role to change    # replace these with your credentials export AWS_ACCESS_KEY_ID=\u0026lt;paste_your_id_here\u0026gt; export AWS_SECRET_ACCESS_KEY=\u0026lt;paste_your_key_here\u0026gt; # modify any of these as desired, or copy/paste as is export AWS_DEFAULT_REGION=us-west-2 export THING_NAME=jetson export GROUP_NAME=jetsonGroup export ROLE_NAME=MyGreengrassV2Role export ROLE_ALIAS=MyGreengrassCoreTokenExchangeRoleAlias Step 5: Run the installer sudo -E java -Dlog.store=FILE \\  -jar ./GreengrassCore/lib/Greengrass.jar \\  --aws-region $AWS_DEFAULT_REGION \\  --root /greengrass/v2 \\  --thing-name $THING_NAME \\  --thing-group-name $GROUP_NAME \\  --tes-role-name $ROLE_NAME \\  --tes-role-alias-name $ROLE_ALIAS \\  --component-default-user ggc_user:ggc_group \\  --provision true \\  --setup-system-service true sudo chmod 755 /greengrass/v2 \u0026amp;\u0026amp; sudo chmod 755 /greengrass Your Greengrass core is now set up and ready to go. Continue on to the next step to validate the installation.\n"
},
{
	"uri": "/inference/make-components.html",
	"title": "Create the Inference Components",
	"tags": [],
	"description": "",
	"content": "Inference on the device is implemented with THREE components:\n variant.Jetson.DLR provides the Deep Learning Runtime (DLR) libraries needed to run the models on the target device variant.Jetson.ImageClassification.ModelStore delivers the collection (or zoo) of Image Classifications models that will be used aws.greengrass.JetsonDLRImageClassification is the actual \u0026lsquo;app\u0026rsquo; that runs the inference model on the device  The recipes and artifacts have been pre-created and stored in the Github repository:\nhttps://github.com/scottrfrancis/aws-iot-greengrass-v2-deploy-nvidia-deepstream\nStep 1: Clone the repository  On your development host, clone the repository  cd ~ git clone git@github.com:scottrfrancis/aws-iot-greengrass-v2-deploy-nvidia-deepstream.git Observe you have the artifacts and recipe files in an arrangement like this:  . ├── artifacts │ ├── aws.greengrass.JetsonDLRImageClassification │ │ ├── 1.0.0 │ │ │ ├── inference.py │ │ │ ├── init.sh │ │ │ ├── IPCUtils.py │ │ │ ├── jetson_inference.py │ │ │ ├── labels.py │ │ │ └── samples_images │ │ │ ├── dog.jpg │ │ │ └── dog.npy │ ├── variant.Jetson.DLR │ │ └── 1.0.0 │ │ ├── installer.sh │ │ └── LICENSE │ └── variant.Jetson.ImageClassification.ModelStore │ ├── 0.1.1 │ ├── resnet18_v1-jetson_nano │ │ ├── compiled.meta │ │ ├── compiled_model.json │ │ ├── compiled.params │ │ ├── compiled.so │ │ ├── dlr.h │ │ ├── libdlr.so │ │ └── manifest │ ├── resnet18_v1-jetson_tx2 │ │ ├── compiled.meta │ │ ├── compiled_model.json │ │ ├── compiled.params │ │ ├── compiled.so │ │ ├── dlr.h │ │ ├── libdlr.so │ │ └── manifest │ └── resnet18_v1-jetson_xavier │ ├── compiled.meta │ ├── compiled_model.json │ ├── compiled.params │ ├── compiled.so │ ├── dlr.h │ ├── libdlr.so │ └── manifest └── recipes ├── aws.greengrass.JetsonDLRImageClassification-1.0.0.json ├── variant.Jetson.DLR-1.0.0.json └── variant.Jetson.ImageClassification.ModelStore-1.0.0.json 14 directories, 47 files Step 2: Zip and upload artifacts to S3  Zip the artifacts for each component  cd ~/aws-iot-greengrass-v2-deploy-nvidia-deepstream/jetson_inference/artifacts cd variant.Jetson.DLR/1.0.0/ zip -rm installer.zip * cd ../.. cd variant.Jetson.ImageClassification.ModelStore/0.1.1/ zip -rm resnet18_v1-jetson.zip * cd ../.. cd aws.greengrass.JetsonDLRImageClassification/1.0.0/ zip -rm image_classification.zip * You should now have a zip file for each component like this\n. ├── aws.greengrass.JetsonDLRImageClassification │ └── 1.0.0 │ └── image_classification.zip ├── variant.Jetson.DLR │ └── 1.0.0 │ └── installer.zip └── variant.Jetson.ImageClassification.ModelStore └── 0.1.1 └── resnet18_v1-jetson.zip Set the bucket_name environment variable for where you will host the artifact files. On your development host, extract your account number to an environment variable  export region=\u0026#39;us-west-2\u0026#39; export acct_num=$(aws sts get-caller-identity --query \u0026#34;Account\u0026#34; --output text) export bucket_name=greengrass-component-artifacts-$acct_num-$region This bucket should have previously been created in the Greengrass installation lab. If this bucket does NOT exist, you can create it with:\naws s3 mb s3://$bucket_name NB- Alternatively, you can use an existing bucket. Set the environment variable $bucket_name for the remainder of this lab.\nCopy the artifacts to the bucket  cd ~/aws-iot-greengrass-v2-deploy-nvidia-deepstream/jetson_inference/artifacts aws s3 sync ./ s3://$bucket_name/artifacts/ Verify the layout of the artifacts in S3\n  Step 3: Create the components  Modify the recipe files to use the bucket and artifacts you just uploaded  cd ~/aws-iot-greengrass-v2-deploy-nvidia-deepstream/jetson_inference/recipes sed -i \u0026#34;s/BUCKET_NAME/$bucket_name/g\u0026#34; *.json Create the components from the modified recipe files  cd ~/aws-iot-greengrass-v2-deploy-nvidia-deepstream/jetson_inference/recipes aws greengrassv2 create-component-version --inline-recipe fileb://variant.Jetson.DLR-1.0.0.json aws greengrassv2 create-component-version --inline-recipe fileb://variant.Jetson.ImageClassification.ModelStore-1.0.0.json aws greengrassv2 create-component-version --inline-recipe fileb://aws.greengrass.JetsonDLRImageClassification-1.0.0.json Verify the components are shown in the AWS IoT Management Console under Greengrass and Components.\n  Note: When the components are created, a integrity checksum is created for the artifacts and added to the recipe (view the recipe on the console to see the digest). Due to this, if you change an artifact, you must update the version for the component or recreate it.\n"
},
{
	"uri": "/greengrass-v2/validate.html",
	"title": "Validate",
	"tags": [],
	"description": "",
	"content": "Use this lab to validate an installed Greengrass core through inspection of the Management Console and deploying a simple Hello World component.\n(This guide adapted from the Greengrass Getting Started Guide)\nStep 1: Inspect the Console Navigate to the AWS IoT Management Console and Click Greengrass and then Core devices from the left side panel.\n  Verify the core you created in the previous lab is shown with a \u0026lsquo;Healthy\u0026rsquo; status before proceeding.\nStep 2: Create an S3 bucket and the component artifacts  On your development host, extract your account number to an environment variable  export region=\u0026#39;us-west-2\u0026#39; export acct_num=$(aws sts get-caller-identity --query \u0026#34;Account\u0026#34; --output text) export bucket_name=greengrass-component-artifacts-$acct_num-$region Create the S3 bucket  aws s3 mb s3://$bucket_name NB- Alternatively, you can use an existing bucket. Set the environment variable $bucket_name for the remainder of this lab.\nCreate the artifact for the component using vim or the text editor of your choice  mkdir -p ~/GreengrassCore/artifacts/com.example.HelloWorld/1.0.0 vim ~/GreengrassCore/artifacts/com.example.HelloWorld/1.0.0/hello_world.py and enter this content\nimport sys import datetime message = f\u0026#34;Hello, {sys.argv[1]}! Current time: {str(datetime.datetime.now())}.\u0026#34; # Print the message to stdout. print(message) # Append the message to the log file. with open(\u0026#39;/tmp/Greengrass_HelloWorld.log\u0026#39;, \u0026#39;a\u0026#39;) as f: print(message, file=f) You should now have a file layout similar to this\n~/GreengrassCore/ ├── artifacts │ └── com.example.HelloWorld │ └── 1.0.0 │ └── hello_world.py Copy the artifact to the S3 bucket  aws s3 sync ~/GreengrassCore/ s3://$bucket_name/ and verify the object layout is correct with\naws s3 ls s3://$bucket_name/ --recursive You should have a result simliar to\n2021-04-13 16:17:54 278 artifacts/com.example.HelloWorld/1.0.0/hello_world.py Step 3: Create the Hello World Component  On your development host, create a directory for the component artifacts.  mkdir -p ~/GreengrassCore/recipes Create a recipe file for the \u0026lsquo;HelloWorld\u0026rsquo; component  vim ~/GreengrassCore/recipes/com.example.HelloWorld-1.0.0.json And enter the following content for the recipe, replacing \u0026lt;paste_bucket_name_here\u0026gt; with the name of the bucket you created earlier\n{ \u0026#34;RecipeFormatVersion\u0026#34;: \u0026#34;2020-01-25\u0026#34;, \u0026#34;ComponentName\u0026#34;: \u0026#34;com.example.HelloWorld\u0026#34;, \u0026#34;ComponentVersion\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;ComponentDescription\u0026#34;: \u0026#34;My first AWS IoT Greengrass component.\u0026#34;, \u0026#34;ComponentPublisher\u0026#34;: \u0026#34;Amazon\u0026#34;, \u0026#34;ComponentConfiguration\u0026#34;: { \u0026#34;DefaultConfiguration\u0026#34;: { \u0026#34;Message\u0026#34;: \u0026#34;world\u0026#34; } }, \u0026#34;Manifests\u0026#34;: [ { \u0026#34;Platform\u0026#34;: { \u0026#34;os\u0026#34;: \u0026#34;linux\u0026#34; }, \u0026#34;Lifecycle\u0026#34;: { \u0026#34;Run\u0026#34;: \u0026#34;python3 -u {artifacts:path}/hello_world.py \u0026#39;{configuration:/Message}\u0026#39;\u0026#34; }, \u0026#34;Artifacts\u0026#34;: [ { \u0026#34;URI\u0026#34;: \u0026#34;s3://\u0026lt;paste_bucket_name_here\u0026gt;/artifacts/com.example.HelloWorld/1.0.0/hello_world.py\u0026#34; } ] } ] } Create the component with the command  aws greengrassv2 create-component-version \\  --inline-recipe fileb://~/GreengrassCore/recipes/com.example.HelloWorld-1.0.0.json and verify the command returns without errors similar to\n{ \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:greengrass:us-west-2:11-----16:components:com.example.HelloWorld:versions:1.0.0\u0026#34;, \u0026#34;componentName\u0026#34;: \u0026#34;com.example.HelloWorld\u0026#34;, \u0026#34;componentVersion\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2021-04-13T16:32:48.936000-07:00\u0026#34;, \u0026#34;status\u0026#34;: { \u0026#34;componentState\u0026#34;: \u0026#34;REQUESTED\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;errors\u0026#34;: {} } } Step 4: Deploy the HelloWorld component  Navigate to the AWS IoT Management Console and Click Greengrass and then Components from the left side panel.    Verify the presence of the component you just created\n Click on the com.example.HelloWorld link from the My components list, then click, Deploy\n  Select Create new deployment then click, Next\n  Name this deployment, cv-lab, select Core device for the Target Type, and provide the name of your Greengrass Core for the Target name\u0026ndash;e.g. jetson. Click, Next\n  NB- if you see the error Target has a configuration, click the Revise deployment. There can be only ONE device-specific deployment, however Thing group deployments can be layered.\n Verify com.example.HelloWorld is checked and click, Next and then click, Next twice more to the Review screen\n  On the Review screen, verify all looks correct, then click, Deploy\n  Step 5: Validate the deployment  Navigate to the AWS IoT Management Console and Click Greengrass and then Deployments from the left side panel. Refresh the screen after a couple minutes.    Verify the \u0026lsquo;cv-lab\u0026rsquo; deployment has \u0026lsquo;Completed\u0026rsquo;\nYou can also verify the status of your core is \u0026lsquo;Healthy\u0026rsquo; on the \u0026lsquo;Core devices\u0026rsquo; screen\nFrom the device shell, check the HelloWorld log   Using SSH\n ssh \u0026lt;user\u0026gt;@\u0026lt;device\u0026gt;  With Keybord and Monitor\n Open the terminal app.\nThen\ncat /tmp/Greengrass_HelloWorld.log Verify the message and timestamp\n(Optional) Step 6: Clean up It can be handy to leave the Hello World component in your account to verify basic Greengrass Core communications, but you may wish to remove it from the device.\n  To remove the Hello World component from the deployment:\n  From the AWS IoT Management Console and Click Greengrass and then Deployments. Check cv-lab (or whatever name you gave your deployment) and click Revise. Click, Next then un-check the com.example.HelloWorld component and click, Next. Click, Next twice more, make sure everything is correct on the Review screen and click, Deploy.\n  Verify the python script is removed from the /greengrass/v2/packages/artifacts-unarchived/com.example.Helloworld directory on the target device. You may need to be root to access this directory It is normal for the directory structure to remain after components are removed.\n  You can revise the deployment to add this component back at any time if desired or add this component to other deployments as a check of the deployment function.\n    To delete the component from your account (This will remove the ability to re-deploy the component without re-creating it):\n  From the AWS IoT Management Console and Click Greengrass and then Components. Click com.example.HelloWorld link, then Delete version.\n  NB- multiple versions of the component can be created and deleted\n  The artifact will remain present in your S3 bucket\n    You can use the S3 console or AWS CLI to delete the artifacts and the bucket if desired.\n  Congratulations!! You now created functional Greengrass core and a test component\n"
},
{
	"uri": "/inference/deploy.html",
	"title": "Deploy and Monitor",
	"tags": [],
	"description": "",
	"content": "In this section, you will deploy the components created in the previous section. As deployment can take some time (15 minutes is not unusual), this guide will also describe some basic monitoring of the Greengrass core and the deployment process.\nStep 1: Deploy the HelloWorld component   Navigate to the AWS IoT Management Console and Click Greengrass and then Deployments from the left side panel. Check the box next to cv-lab and click, Revise.\n  Click, Next and check the boxes for the components you just created.\n    Click, Next three times more to advance to the Review screen, verify the information is correct and click, Deploy.  "
},
{
	"uri": "/shortcodes.html",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": "Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\nBut this happens to be a bad idea. Everyone uses Markdown because it\u0026rsquo;s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\nHugo-theme-learn provides multiple shortcodes on top of existing ones.\n Attachments  The Attachments shortcode displays a list of files attached to a page.\n Button  Nice buttons on your page.\n Children  List the child pages of a page\n Expand  Displays an expandable/collapsible section of text on your page\n Image  Displays a preformatted image on your page\n Notice  Disclaimers to help you structure your page\n Site param  Get value of site params variables in your page.\n Site URL  Get the base site URL in your page.\n Youtube  Youtube links that respect privacy.\n "
},
{
	"uri": "/shortcodes/attachments.html",
	"title": "Attachments",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": "The Attachments shortcode displays a list of files attached to a page.\n  Attachments   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    Usage The shortcurt lists files found in a specific folder.\nAttachements must be place in a folder named like your page and ending with .files.\n  content  chapter  _index.en.md _index.en.files  attachment.pdf         Be aware that if you use a multilingual website, you will need to have as many folders as languages.\n Parameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List\u0026rsquo;s title   style \u0026quot;\u0026quot; Choose between \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; and \u0026ldquo;green\u0026rdquo; for nice style   pattern \u0026ldquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. The pattern parameter value must be regular expressions.    For example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use *.jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)  Examples List of attachments ending in pdf or mp4 {{%attachments title=\u0026quot;Related files\u0026quot; pattern=\u0026quot;.*(png|mp4)\u0026quot;/%}}  renders as\n  Related files   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    Colored styled box {{%attachments style=\u0026quot;orange\u0026quot; /%}}  renders as\n  Attachments   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    {{%attachments style=\u0026quot;grey\u0026quot; /%}}  renders as\n  Attachments   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    {{%attachments style=\u0026quot;blue\u0026quot; /%}}  renders as\n  Attachments   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    {{%attachments style=\u0026quot;green\u0026quot; /%}}  renders as\n  Attachments   AWS_AWS_logo_RGB.png  (32 kb)   DeckAssets_allup_light_filter-documents@2x.png  (6 kb)    "
},
{
	"uri": "/shortcodes/button.html",
	"title": "Button",
	"tags": [],
	"description": "Nice buttons on your page.",
	"content": "A button is a just a clickable button with optional icon.\n{{% button href=\u0026quot;https://en.wikipedia.org/wiki/Here_be_dragons\u0026quot; %}}Here be dragonss{{% /button %}} {{% button href=\u0026quot;https://en.wikipedia.org/wiki/Here_be_dragons\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Here be dragons with icon{{% /button %}} {{% button href=\u0026quot;https://en.wikipedia.org/wiki/Here_be_dragons\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Here be dragons with icon right{{% /button %}}  Here be dragons   Here be dragons with icon  Here by dragons with icon right   "
},
{
	"uri": "/shortcodes/children.html",
	"title": "Children",
	"tags": [],
	"description": "List the child pages of a page",
	"content": "Use the children shortcode to list the child pages of a page and the further descendants (children\u0026rsquo;s children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   style \u0026ldquo;li\u0026rdquo; Choose the style used to display descendants. It could be any HTML tag name   showhidden \u0026ldquo;false\u0026rdquo; When true, child pages hidden from the menu will be displayed   description \u0026ldquo;false\u0026rdquo; Allows you to include a short text under each page in the list.when no description exists for the page, children shortcode takes the first 70 words of your content. read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages.  Tips: set 999 to get all descendants   sort none Sort Children By\nWeight - to sort on menu orderName - to sort alphabetically on menu labelIdentifier - to sort alphabetically on identifier set in frontmatterURL - URL    Demo {{% children description=\u0026quot;true\u0026quot; depth=\u0026quot;3\u0026quot; showhidden=\u0026quot;true\u0026quot; %}}   page 1    page 1-1    page 1-1-1     page 2    page test 3      page 3     page test     {{% children style=\u0026quot;h2\u0026quot; depth=\u0026quot;3\u0026quot; description=\u0026quot;true\u0026quot; showhidden=\u0026quot;true\u0026quot; %}}   page 1  This is a demo child page\n page 1-1  This is a demo child page\n page 1-1-1  This is a demo child page\n page 2  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page test 3  This is a page test\n page 3  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page test  This is a page test\n {{% children style=\u0026quot;div\u0026quot; depth=\u0026quot;999\u0026quot; showhidden=\u0026quot;true\u0026quot; %}}   page 1   page 1-1   page 1-1-1   page 1-1-1-1   page 1-1-1-1-1   Attachments   Button   Children   page 1   page 1-1   page 1-1-1   page 1-1-1-1   page 1-1-1-1-1   page 2   page test 3   page 3   page test   Expand   Image   Notice   Site param   Site URL   Youtube   page 2   page test 3   page 3   page test   "
},
{
	"uri": "/shortcodes/expand.html",
	"title": "Expand",
	"tags": [],
	"description": "Displays an expandable/collapsible section of text on your page",
	"content": "The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example\n  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Usage This shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is \u0026ldquo;Expand me\u0026hellip;\u0026quot;)\n{{%expand \u0026quot;Does this template rock?\u0026quot; %}}Yes !.{{% /expand%}}    Does this template rock?   Yes !   Demo {{%expand%}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{% /expand%}}    Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  "
},
{
	"uri": "/shortcodes/img.html",
	"title": "Image",
	"tags": [],
	"description": "Displays a preformatted image on your page",
	"content": "The img shortcode displays a preformatted image that is stored in your Page Bundle on your page. This means you should store your images in the same directory as your page. In the example below, the page markdown and the \u0026ldquo;chapter.en.png\u0026rdquo; file are both stored in the same directory.\nUsage This shortcode takes two parameters:\n The relative path to the image (based on the location of the current page). The alternate text to be used with the image.  {{\u0026lt; img \u0026#34;chapter.en.png\u0026#34; \u0026#34;A Chapter\u0026#34; \u0026gt;}}    "
},
{
	"uri": "/shortcodes/notice.html",
	"title": "Notice",
	"tags": [],
	"description": "Disclaimers to help you structure your page",
	"content": "The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}} A notice disclaimer {{% /notice %}} renders as\nA notice disclaimer\n Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as\nAn information disclaimer\n Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as\nA tip disclaimer\n Warning {{% notice warning %}} An warning disclaimer {{% /notice %}} renders as\nA warning disclaimer\n "
},
{
	"uri": "/shortcodes/siteparam.html",
	"title": "Site param",
	"tags": [],
	"description": "Get value of site params variables in your page.",
	"content": "siteparam shortcode is used to help you print values of site params.\nFor instance, in this current site, the editURL variable is used in config.toml\n[params] editURL = \u0026#34;https://code.amazon.com/packages/Aws-workshop-template/blobs/master/--/workshop/content/\u0026#34; Use the siteparam shortcode to display its value.\n`editURL` Value : {{% siteparam \u0026quot;editURL\u0026quot; %}} is displayed as\neditURL Value :\n"
},
{
	"uri": "/shortcodes/siteurl.html",
	"title": "Site URL",
	"tags": [],
	"description": "Get the base site URL in your page.",
	"content": "The siteurl shortcode is used to help you print the current base URL for your hosted site.\nFor instance, in this current site, the baseURL is\nUse the siteurl shortcode to display its value.\n{{% siteurl %}} is displayed as\n"
},
{
	"uri": "/shortcodes/youtube.html",
	"title": "Youtube",
	"tags": [],
	"description": "Youtube links that respect privacy.",
	"content": "Amazon is required to adhere to GDPR regulations, and controlling cookies is one part of that. Linking to Youtube can create cookies. Using the Youtube shortcode ensures privacy-enhanced links to youtube videos:\n{{% youtube dQw4w9WgXcQ %}}   "
},
{
	"uri": "/launch.html",
	"title": "Launch",
	"tags": [],
	"description": "",
	"content": "Follow these steps to launch your workshop for others to use!\n"
},
{
	"uri": "/launch/metadata.html",
	"title": "Metadata",
	"tags": [],
	"description": "Use metadata to catalogue and describe your workshop",
	"content": "There is a metadata.yml file found in the root of this repository that allows workshop creators to store descriptive information about their content for discovery \u0026amp; identification purposes.\nA metadata.yml file is required for all workshops that are intended to be reused and shared broadly.\n #name - DNS-friendly name for the workshop. This will be used when generating the hosting URL (ie. https://my-first-workshop.workshops.aws/) name: my-first-workshop #title - The title of your workshop title: My First Workshop  #description - A short description that will be displayed in search results description: Creating unicorns with serverless bitcoin magic!  #categories - Refer to official AWS categories covered by the workshop content here categories: - Networking - Compute #services - Refer to the official AWS service names covered by the workshop content here services: - Api Gateway - Lambda #level - Approximate skill level needed for this workshop level: 100 #duration - Estimated duration in minutes duration: 60 #cost - Cost in USD. If the content is offered without cost, enter 0 cost: 0 #author - Amazon alias of the primary author of the content author: mpgoetz  #audience - Names of the personas associated with this workshop audience: - IT Professional - Developer "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/shortcodes/children/children-1.html",
	"title": "page 1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1.html",
	"title": "page 1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1.html",
	"title": "page 1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1.html",
	"title": "page 1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1.html",
	"title": "page 1-1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-2.html",
	"title": "page 2",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "/shortcodes/children/children-3.html",
	"title": "page 3",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "/shortcodes/children/test.html",
	"title": "page test",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test demo child page\n"
},
{
	"uri": "/shortcodes/children/children-2/test3.html",
	"title": "page test 3",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test 3 demo child page\n"
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]